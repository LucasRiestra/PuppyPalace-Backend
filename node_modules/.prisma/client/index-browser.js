
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  correo_electronico: 'correo_electronico',
  contrasena: 'contrasena',
  telefono: 'telefono',
  direccion: 'direccion',
  es_cuidador: 'es_cuidador',
  fecha_registro: 'fecha_registro'
};

exports.Prisma.CuidadorScalarFieldEnum = {
  id: 'id',
  usuario_id: 'usuario_id',
  experiencia: 'experiencia',
  tipo_servicios: 'tipo_servicios',
  calificacion_promedio: 'calificacion_promedio',
  cantidad_servicios: 'cantidad_servicios'
};

exports.Prisma.ServicioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precio_base: 'precio_base'
};

exports.Prisma.DisponibilidadScalarFieldEnum = {
  id: 'id',
  cuidador_id: 'cuidador_id',
  fecha_disponible: 'fecha_disponible',
  servicio_id: 'servicio_id'
};

exports.Prisma.SolicitudScalarFieldEnum = {
  id: 'id',
  usuario_id: 'usuario_id',
  cuidador_id: 'cuidador_id',
  servicio_id: 'servicio_id',
  fecha_solicitada: 'fecha_solicitada',
  estado: 'estado',
  fecha_respuesta: 'fecha_respuesta'
};

exports.Prisma.ComentarioScalarFieldEnum = {
  id: 'id',
  solicitud_id: 'solicitud_id',
  usuario_id: 'usuario_id',
  calificacion: 'calificacion',
  comentario: 'comentario',
  fecha: 'fecha'
};

exports.Prisma.AutenticacionScalarFieldEnum = {
  id: 'id',
  usuario_id: 'usuario_id',
  token: 'token',
  expiracion: 'expiracion',
  tipo: 'tipo'
};

exports.Prisma.MensajeScalarFieldEnum = {
  id: 'id',
  remitente_id: 'remitente_id',
  destinatario_id: 'destinatario_id',
  contenido: 'contenido',
  fecha: 'fecha',
  solicitud_id: 'solicitud_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Cuidador: 'Cuidador',
  Servicio: 'Servicio',
  Disponibilidad: 'Disponibilidad',
  Solicitud: 'Solicitud',
  Comentario: 'Comentario',
  Autenticacion: 'Autenticacion',
  Mensaje: 'Mensaje'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
